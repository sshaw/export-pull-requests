#!/usr/bin/env ruby

require "csv"
require "optparse"
require "time"
require "logger"

require "github_api"
require "gitlab"
require "bitbucket_rest_api"

VERSION = "0.2.1"
SERVICES = %w[github gitlab bitbucket]
GIT_CONFIGS = %w[epr.token github.oauth-token]

TYPE_ISSUE = "Issue"
TYPE_PR = "PR"

EXPORT_ISSUES = "issues"
EXPORT_PRS = "pr"

def localtime(t)
  Time.parse(t).localtime.strftime("%x %X")
end

def parse_repos(repos)
  repos.map do |r|
    abort "invalid repository #{r}" unless r =~ %r{\A(\S+)/(\S+)\z}
    [ $1, $2 ]
  end
end

def skip_user?(user)
  $exclude_users.include?(user) || $include_users.any? && !$include_users.include?(user)
end

def lookup_token
  return ENV["EPR_TOKEN"] unless ENV["EPR_TOKEN"].to_s.strip.empty?

  begin
    GIT_CONFIGS.each do |setting|
      token = `git config #{setting}`.chomp
      return token unless token.empty?
    end
  rescue Errno::ENOENT
    # git not found, ignore
  end
end

def bitbucket(user, repo)
  # TODO: make sure no need to translate any states
  # https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests

  options = { :basic_auth => $token }
  options[:endpoint] = $endpoint if $endpoint

  $bitbucket ||= BitBucket.new(options)

  rows = []
  no_user = "Anonymous"
  repo_name = "#{user}/#{repo}"

  pull_requests = lambda do
    page = 0

    loop do
      page += 1

      prs = $bitbucket.repos.pull_request.all(user, repo, :page => page, :state => $filter.upcase)
      prs["values"].each do |pr|
        next if pr.author && skip_user?(pr.author.username)

        rows << [
          repo_name,
          TYPE_PR,
          pr.id,
          pr.author ? pr.author.username : no_user,
          pr.title,
          pr.state,
          localtime(pr.created_on),
          localtime(pr.updated_on),
          pr["links"].html.href
        ]
      end

      break unless prs["next"]
    end
  end

  issues = lambda do
    start = 0

    loop do
      issues = $bitbucket.issues.list_repo(user, repo, :start => start, :status => $filter)
      break unless issues.any?

      issues.each do |issue|
        next if issue["reported_by"] && skip_user?(issue["reported_by"]["username"])

        rows << [
          repo_name,
          TYPE_ISSUE,
          issue["local_id"],
          issue["reported_by"] ? issue["reported_by"]["username"] : no_user,
          issue["title"],
          issue["status"],
          localtime(issue["utc_created_on"]),
          localtime(issue["utc_last_updated"]),
          # Not in response
          sprintf("https://bitbucket.org/%s/issues/%s", repo_name, issue["local_id"])
        ]
      end

      start += issues.size
    end
  end

  case $export
  when EXPORT_PRS
    pull_requests[]
  when EXPORT_ISSUES
    issues[]
  else
    pull_requests[]
    issues[]
  end

  rows
end

def github(user, repo)
  rows = []
  method = $export == EXPORT_PRS ? :pull_requests : :issues

  options = { :oauth_token => $token, :auto_pagination => true }
  options[:endpoint] = $endpoint if $endpoint

  $gh ||= Github.new(options)
  $gh.public_send(method).list(:user => user, :repo => repo, :state => $filter).each_page do |page|
    next if page.size.zero?     # Needed for auto_pagination

    page.each do |item|
      # issues method will return issues and PRs
      next if $export == EXPORT_ISSUES && item.pull_request
      next if skip_user?(item.user.login)

      rows << [
        "#{user}/#{repo}",
        item.pull_request ? TYPE_PR : TYPE_ISSUE,
        item.number,
        item.user.login,
        item.title,
        item.body[0..32700],
        item.state,
        localtime(item.created_at),
        localtime(item.updated_at),
        item.html_url,
      ]
      rows.last.delete_at(5) unless $body
    end
  end

  rows
end

def gitlab(user, repo)
  rows = []

  case $export
  when EXPORT_PRS
    methods = [:merge_requests]
  when EXPORT_ISSUES
    methods = [:issues]
  else
    methods = [:merge_requests, :issues]
  end

  # Do we care about this differing in output?
  state = $filter == "open" ? "opened" : $filter

  $gitlab ||= Gitlab.client(:auth_token => $token, :endpoint => $endpoint || "https://gitlab.com/api/v4")
  methods.each do |method|
    $gitlab.public_send(method, "#{user}/#{repo}", :state => state).auto_paginate do |item|
      next if skip_user?(item.author.username)

      rows << [
        "#{user}/#{repo}",
        method == :issues ? TYPE_ISSUE : TYPE_PR,
        # Yes, it's called iid
        item.iid,
        item.author.username,
        item.title,
        item.state,
        localtime(item.created_at),
        localtime(item.updated_at),
        item.web_url
      ]
    end
  end

  rows
end

def export_repos(argv)
  rows = []
  if $body then
    rows << %w[Repository Type # User Title Body State Created Updated URL]
  else
    rows << %w[Repository Type # User Title State Created Updated URL]
  end

  repos = parse_repos(argv)
  repos.each do |user, repo|
    case $provider
    when "github"
      rows.concat(github(user, repo))
    when "gitlab"
      rows.concat(gitlab(user, repo))
    when "bitbucket"
      rows.concat(bitbucket(user, repo))
    else
      abort "unknown service provider: #$provider"
    end

    rows.each { |r| puts r.to_csv }
    rows.clear
  end
end

# Hashie is used by Bitbucket, and it spews warnings to stdout. We stop that,
# specifically: https://github.com/bitbucket-rest-api/bitbucket/issues/87
Hashie.logger = Logger.new(File::NULL) if defined?(Hashie)

$exclude_users = []
$include_users = []
$export = "all"
$endpoint = nil
$filter = "open"
$provider = ENV["EPR_SERVICE"] || SERVICES[0]
$token = lookup_token
$body = false

parser = OptionParser.new do |opts|
  opts.banner = "usage: #{File.basename($0)} [-hv] [-e url] [-s state] [-t token] [-c user1,user2...] [-b] user/repo1 [user/repo2...]"

  opts.on "-c", "--creator=USER1,USER2,...", Array, "Export PRs created by given username(s); prepend `!' to exclude user" do |u|
    $exclude_users, $include_users = u.partition { |name| name.start_with?("!") }
    $exclude_users.map! { |name| name[1..-1] } # remove "!"
  end

  opts.on "-e", "--endpoint=URL", "Endpoint URL for 'enterprise', etc... repositories" do |url|
    $endpoint = url
  end

  opts.on "-h", "--help", "Show this message" do
    puts opts
    exit
  end

  opts.on "-p, --provider=NAME", SERVICES, "Service provider: bitbucket, github, or gitlab; defaults to github" do |name|
    $provider = name
  end

  opts.on "-s", "--state=STATE", "Export items in the given state, defaults to open" do |f|
    $filter = f
  end

  opts.on "-t", "--token=TOKEN", "API token" do |t|
    $token = t
  end

  opts.on "-x", "--export=WHAT", %w[pr issues all], "What to export: pr, issues, or all; defaults to all" do |x|
    $export = x
  end

  opts.on "-v", "--version", "epr version" do
    puts "v#{VERSION} (GitHub v#{Github::VERSION}, GitLab v#{Gitlab::VERSION}, Bitbucket v#{BitBucket::VERSION::STRING})"
    exit
  end

  opts.on "-b", "--body", "Include the issue/pr body description in the output" do
    $body = true
  end
end

parser.parse!
abort parser.banner if ARGV.empty?

begin
  export_repos(ARGV)
rescue => e
  abort "Export failed: #{e}"
end
